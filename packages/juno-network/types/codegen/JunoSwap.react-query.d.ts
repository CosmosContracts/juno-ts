/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Uint128, BalanceResponse, Expiration, TokenSelect, Addr, InfoResponse, Token1ForToken2PriceResponse, Token2ForToken1PriceResponse } from "./JunoSwap.types";
import { JunoSwapQueryClient, JunoSwapClient } from "./JunoSwap.client";
export interface JunoSwapReactQuery<TResponse> {
    client: JunoSwapQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface JunoSwapToken2ForToken1PriceQuery extends JunoSwapReactQuery<Token2ForToken1PriceResponse> {
    args: {
        token2Amount: Uint128;
    };
}
export declare function useJunoSwapToken2ForToken1PriceQuery({ client, args, options }: JunoSwapToken2ForToken1PriceQuery): any;
export interface JunoSwapToken1ForToken2PriceQuery extends JunoSwapReactQuery<Token1ForToken2PriceResponse> {
    args: {
        token1Amount: Uint128;
    };
}
export declare function useJunoSwapToken1ForToken2PriceQuery({ client, args, options }: JunoSwapToken1ForToken2PriceQuery): any;
export interface JunoSwapInfoQuery extends JunoSwapReactQuery<InfoResponse> {
}
export declare function useJunoSwapInfoQuery({ client, options }: JunoSwapInfoQuery): any;
export interface JunoSwapBalanceQuery extends JunoSwapReactQuery<BalanceResponse> {
    args: {
        address: string;
    };
}
export declare function useJunoSwapBalanceQuery({ client, args, options }: JunoSwapBalanceQuery): any;
export interface JunoSwapSwapToMutation {
    client: JunoSwapClient;
    msg: {
        expiration?: Expiration;
        inputAmount: Uint128;
        inputToken: TokenSelect;
        minToken: Uint128;
        recipient: Addr;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapSwapToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapSwapToMutation>, "mutationFn">): any;
export interface JunoSwapMultiContractSwapMutation {
    client: JunoSwapClient;
    msg: {
        expiration?: Expiration;
        inputToken: TokenSelect;
        inputTokenAmount: Uint128;
        outputAmmAddress: Addr;
        outputMinToken: Uint128;
        outputToken: TokenSelect;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapMultiContractSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapMultiContractSwapMutation>, "mutationFn">): any;
export interface JunoSwapSwapToken2ForToken1Mutation {
    client: JunoSwapClient;
    msg: {
        expiration?: Expiration;
        minToken1: Uint128;
        token2Amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapSwapToken2ForToken1Mutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapSwapToken2ForToken1Mutation>, "mutationFn">): any;
export interface JunoSwapSwapToken1ForToken2Mutation {
    client: JunoSwapClient;
    msg: {
        expiration?: Expiration;
        minToken2: Uint128;
        token1Amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapSwapToken1ForToken2Mutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapSwapToken1ForToken2Mutation>, "mutationFn">): any;
export interface JunoSwapRemoveLiquidityMutation {
    client: JunoSwapClient;
    msg: {
        amount: Uint128;
        expiration?: Expiration;
        minToken1: Uint128;
        minToken2: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapRemoveLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapRemoveLiquidityMutation>, "mutationFn">): any;
export interface JunoSwapAddLiquidityMutation {
    client: JunoSwapClient;
    msg: {
        expiration?: Expiration;
        maxToken2: Uint128;
        minLiquidity: Uint128;
        token1Amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useJunoSwapAddLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, JunoSwapAddLiquidityMutation>, "mutationFn">): any;
